# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
"""
adb_shell.auth.sign_pythonrsa - ADB authentication using the ``rsa`` package.

"""

import typing

"""

.. rubric:: Contents

* :class:`_Accum`

    * :meth:`_Accum.digest`
    * :meth:`_Accum.update`

* :func:`_load_rsa_private_key`
* :class:`PythonRSASigner`

    * :meth:`PythonRSASigner.FromRSAKeyPath`
    * :meth:`PythonRSASigner.GetPublicKey`
    * :meth:`PythonRSASigner.Sign`

"""

class PythonRSASigner(object):
    """
    PythonRSASigner(pub=None, priv=None)

    Implements :class:`adb_protocol.AuthSigner` using http://stuvel.eu/rsa.

    Parameters
    ----------
    pub : str, None
        The contents of the public key file
    priv : str, None
        The path to the private key

    Attributes
    ----------
    priv_key : rsa.key.PrivateKey
        The loaded private key
    pub_key : str, None
        The contents of the public key file
    """

    __dict__: ...
    """
    dictionary for instance variables (if defined)
    """

    __weakref__: ...
    """
    list of weak references to the object (if defined)
    """
    @classmethod
    def FromRSAKeyPath(cls, rsa_key_path: typing.Text) -> PythonRSASigner:
        """
        Create a :class:`PythonRSASigner` instance using the provided private key.

        Parameters
        ----------
        rsa_key_path : str
            The path to the private key; the public key must be ``rsa_key_path + '.pub'``.

        Returns
        -------
        PythonRSASigner
            A :class:`PythonRSASigner` with private key ``rsa_key_path`` and public key ``rsa_key_path + '.pub'``
        """
        ...
    def GetPublicKey(self):
        """
        Returns the public key in PEM format without headers or newlines.

        Returns
        -------
        self.pub_key : str, None
            The contents of the public key file, or ``None`` if a public key was not provided.
        """
        ...
    def Sign(self, data):
        """
        Signs given data using a private key.

        Parameters
        ----------
        data : bytes
            The data to be signed

        Returns
        -------
        bytes
            The signed ``data``
        """
        ...
    def __init__(self, pub=None, priv=None):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    ...

class _Accum(object):
    """
    A fake hashing algorithm.

    The Python ``rsa`` lib hashes all messages it signs. ADB does it already, we just
    need to slap a signature on top of already hashed message.  Introduce a "fake"
    hashing algo for this.

    Attributes
    ----------
    _buf : bytes
        A buffer for storing data before it is signed
    """

    __dict__: ...
    """
    dictionary for instance variables (if defined)
    """

    __weakref__: ...
    """
    list of weak references to the object (if defined)
    """
    def __init__(self):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def digest(self):
        """
        Return the digest value as a string of binary data.

        Returns
        -------
        self._buf : bytes
            ``self._buf``
        """
        ...
    def update(self, msg):
        """
        Update this hash object's state with the provided ``msg``.

        Parameters
        ----------
        msg : bytes
            The message to be appended to ``self._buf``
        """
        ...
    ...

def _load_rsa_private_key(pem):
    """
    PEM encoded PKCS#8 private key -> ``rsa.PrivateKey``.

    ADB uses private RSA keys in pkcs#8 format. The ``rsa`` library doesn't
    support them natively.  Do some ASN unwrapping to extract naked RSA key
    (in der-encoded form).

    See:

    * https://www.ietf.org/rfc/rfc2313.txt
    * http://superuser.com/a/606266

    Parameters
    ----------
    pem : str
        The private key to be loaded

    Returns
    -------
    rsa.key.PrivateKey
        The loaded private key
    """
    ...

__all__: ...
"""
['PythonRSASigner', '_Accum', '__builtins__', '__cached__', ...
"""
