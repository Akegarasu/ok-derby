# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
"""
cv2.img_hash

"""

import typing

from numpy import ndarray

from . import _contrib

def AverageHash_create() -> _contrib.img_hash_AverageHash:
    """
    .
    """
    ...

def BlockMeanHash_create(mode: int = ...) -> _contrib.img_hash_BlockMeanHash:
    """
    .
    """
    ...

def ColorMomentHash_create() -> _contrib.img_hash_ColorMomentHash:
    """
    .
    """
    ...

def MarrHildrethHash_create(alpha=..., scale=...) -> _contrib.img_hash_ColorMomentHash:
    """
    .   @param alpha int scale factor for marr wavelet (default=2).
    .           @param scale int level of scale factor (default = 1)
    """
    ...

def PHash_create() -> _contrib.img_hash_PHash:
    """
    .
    """
    ...

def RadialVarianceHash_create(
    sigma=..., numOfAngleLine: int = ...
) -> _contrib.img_hash_RadialVarianceHash:
    """
    .
    """
    ...

def averageHash(inputArr: ndarray, outputArr: ndarray = ...) -> ndarray:
    """
    .   @brief Calculates img_hash::AverageHash in one call
    .   @param inputArr input image want to compute hash value, type should be CV_8UC4, CV_8UC3 or CV_8UC1.
    .   @param outputArr Hash value of input, it will contain 16 hex decimal number, return type is CV_8U
    """
    ...

def blockMeanHash(
    inputArr: ndarray, outputArr: ndarray = ..., mode: int = ...
) -> ndarray:
    """
    .   @brief Computes block mean hash of the input image
    .       @param inputArr input image want to compute hash value, type should be CV_8UC4, CV_8UC3 or CV_8UC1.
    .       @param outputArr Hash value of input, it will contain 16 hex decimal number, return type is CV_8U
    .       @param mode the mode
    """
    ...

def colorMomentHash(inputArr: ndarray, outputArr: ndarray = ...) -> ndarray:
    """
    .   @brief Computes color moment hash of the input, the algorithm
    .       is come from the paper "Perceptual  Hashing  for  Color  Images
    .       Using  Invariant Moments"
    .       @param inputArr input image want to compute hash value,
    .       type should be CV_8UC4, CV_8UC3 or CV_8UC1.
    .       @param outputArr 42 hash values with type CV_64F(double)
    """
    ...

def marrHildrethHash(
    inputArr: ndarray, outputArr: ndarray = ..., alpha: int = ..., scale: int = ...
) -> ndarray:
    """
    .   @brief Computes average hash value of the input image
    .       @param inputArr input image want to compute hash value,
    .       type should be CV_8UC4, CV_8UC3, CV_8UC1.
    .       @param outputArr Hash value of input, it will contain 16 hex
    .       decimal number, return type is CV_8U
    .       @param alpha int scale factor for marr wavelet (default=2).
    .       @param scale int level of scale factor (default = 1)
    """
    ...

def pHash(inputArr: ndarray, outputArr: ndarray = ...) -> ndarray:
    """
    .   @brief Computes pHash value of the input image
    .       @param inputArr input image want to compute hash value,
    .        type should be CV_8UC4, CV_8UC3, CV_8UC1.
    .       @param outputArr Hash value of input, it will contain 8 uchar value
    """
    ...

def radialVarianceHash(
    inputArr: ndarray,
    outputArr: ndarray = ...,
    sigma: int = ...,
    numOfAngleLine: int = ...,
) -> ndarray:
    """
    .   @brief Computes radial variance hash of the input image
    .       @param inputArr input image want to compute hash value,
    .       type should be CV_8UC4, CV_8UC3, CV_8UC1.
    .       @param outputArr Hash value of input
    .       @param sigma Gaussian kernel standard deviation
    .       @param numOfAngleLine The number of angles to consider
    """
    ...

BLOCK_MEAN_HASH_MODE_0: int = 0

BLOCK_MEAN_HASH_MODE_1: int = 1

__all__: ...
"""
['AverageHash_create', 'BLOCK_MEAN_HASH_MODE_0', 'BLOCK_MEAN...
"""
